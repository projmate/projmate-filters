// Generated by CoffeeScript 1.5.0
(function() {
  var Async, Fs, Util, glob,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  glob = require("multi-glob").glob;

  Async = require("async");

  Fs = require("fs");

  Util = require("util");

  module.exports = function(Projmate) {
    var LoadFiles;
    return LoadFiles = (function(_super) {

      __extends(LoadFiles, _super);

      function LoadFiles() {
        LoadFiles.__super__.constructor.apply(this, arguments);
      }

      LoadFiles.prototype.extnames = "*";

      LoadFiles.prototype.process = function(task, options, cb) {
        var cwd, log, patterns;
        log = this.log;
        cwd = process.cwd();
        patterns = task.config._files.include;
        return glob(patterns, {
          nosort: true
        }, function(err, files) {
          var assets;
          if (err) {
            return cb(err);
          }
          assets = [];
          if (files.length > 0) {
            return Async.eachSeries(files, function(file, cb) {
              return Fs.readFile(file, "utf8", function(err, text) {
                var asset;
                if (err) {
                  return cb(err);
                }
                asset = new Projmate.FileAsset({
                  filename: file,
                  cwd: cwd,
                  text: text
                });
                assets.push(asset);
                return cb();
              });
            }, function(err) {
              task.assets = assets;
              return cb();
            });
          } else {
            return cb("No files found: " + Util.inspect(patterns));
          }
        });
      };

      return LoadFiles;

    })(Projmate.TaskProcessor);
  };

}).call(this);
