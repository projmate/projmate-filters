// Generated by CoffeeScript 1.6.1
(function() {
  var Async, Fs, Util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Async = require("async");

  Fs = require("fs");

  Util = require("util");

  module.exports = function(Projmate) {
    var FileAsset, LoadFilenames, PmUtils, TaskProcessor, _ref;
    FileAsset = Projmate.FileAsset, TaskProcessor = Projmate.TaskProcessor, PmUtils = Projmate.Utils;
    return LoadFilenames = (function(_super) {

      __extends(LoadFilenames, _super);

      function LoadFilenames() {
        _ref = LoadFilenames.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      LoadFilenames.prototype.extnames = "*";

      LoadFilenames.prototype.process = function(task, options, cb) {
        var cwd, excludePatterns, log, patterns;
        log = this.log;
        cwd = process.cwd();
        patterns = task.config.files.include;
        excludePatterns = task.config.files.exclude;
        return PmUtils.glob(patterns, excludePatterns, {
          nosort: true
        }, function(err, files) {
          var assets, file, stat, _i, _len;
          if (err) {
            return cb(err);
          }
          assets = [];
          assets.create = function(opts) {
            return assets.push(new FileAsset({
              filename: opts.filename,
              text: opts.text,
              cwd: cwd,
              parent: assets
            }));
          };
          assets.clear = function(opts) {
            return assets.length = 0;
          };
          if (files.length > 0) {
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              file = files[_i];
              stat = Fs.statSync(file);
              assets.create({
                filename: file,
                text: "",
                stat: stat
              });
            }
            task.assets = assets;
            return cb();
          } else {
            return cb("No files found: " + Util.inspect(patterns));
          }
        });
      };

      return LoadFilenames;

    })(TaskProcessor);
  };

}).call(this);
