// Generated by CoffeeScript 1.6.3
(function() {
  var Fs, Path, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("lodash");

  Path = require("path");

  Fs = require('fs');

  module.exports = function(Projmate) {
    var Filter, TypeScript, Utils, lib_d_ts, schema;
    Filter = Projmate.Filter, Utils = Projmate.Utils;
    schema = {
      title: 'Compiles TypeScript to JavaScript',
      type: 'object',
      __: {
        extnames: [".ts"],
        outExtname: ".js",
        defaults: {
          development: {
            sourceMap: false
          },
          production: {
            sourceMap: false
          }
        }
      }
    };
    lib_d_ts = null;
    TypeScript = null;
    return TypeScript = (function(_super) {
      __extends(TypeScript, _super);

      TypeScript.schema = schema;

      function TypeScript() {
        if (lib_d_ts == null) {
          lib_d_ts = Fs.readFileSync(Path.resolve(__dirname + '/../../node_modules/typescript/bin/lib.d.ts'), 'utf8');
        }
        if (TypeScript == null) {
          TypeScript = require('typescript');
        }
      }

      TypeScript.prototype.process = function(asset, options, cb) {
        var compiler, err, js;
        ({
          outfile: {
            source: '',
            Write: function(s) {
              return this.source += s;
            },
            WriteLine: function(s) {
              return this.source += s + '\n';
            },
            Close: function() {}
          }
        });
        try {
          compiler = new TypeSript.TypeScriptCmpiler(outfile);
          compiler.parser.errorRecovery = true;
          compiler.setErrorCallback(function(start, len, message, block) {
            return console.error('Compilation error: ', message, '\n Code block: ', block, ' Start position: ', start, ' Length: ', len);
          });
          compiler.addUnit(lib_d_ts, 'lib.d.ts');
          console.error('lib_d_ts', lib_d_ts);
          compiler.addUnit(asset.text, asset.filename);
          compiler.typeCheck();
          compiler.emit(false, function(filename) {
            return outfile;
          });
          js = outfile.source;
          return cb(null, js);
        } catch (_error) {
          err = _error;
          return cb(err);
        }
      };

      return TypeScript;

    })(Filter);
  };

}).call(this);
